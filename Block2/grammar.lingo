record = varDefine | exp;
exp = derivative | ops | nums;

derivative = ws "d" exp:arg "/d(" ws varName$v ws ")" ws {DerivativeExp(:arg, $v)};  

varDefine =  ws varName$name ws "=" ws exp:val ws {VarDefine($name, :val)};

negVar = ws "-" varName$v ws {MulExp(Double(s2d("-1.0")), Var($v))};
var = ws varName$v ws {Var($v)}; 
varName = (letter+ digit*);



ops = ln | add | mul | sub | div | mod | deg;
nums = negVar | var | negDouble | double | negInt | int;

add = ws "(" ws exp:arg1 ws "+" ws exp:arg2 ws ")" ws {AddExp(:arg1, :arg2)};
mul = ws "(" ws exp:arg1 ws "*" ws exp:arg2 ws ")" ws {MulExp(:arg1, :arg2)};
sub = ws "(" ws exp:arg1 ws "-" ws exp:arg2 ws ")" ws {SubExp(:arg1, :arg2)};
div = ws "(" ws exp:arg1 ws "/" ws exp:arg2 ws ")" ws {DivExp(:arg1, :arg2)};
mod = ws "(" ws exp:arg1 ws "%" ws exp:arg2 ws ")" ws {ModExp(:arg1, :arg2)};
deg = ws "(" ws exp:arg1 "^" exp:arg2 ws ")" ws {DegExp(:arg1, :arg2)};
ln = ws "LN(" ws exp:arg ws ")" ws {LNExp(:arg)};


negDouble = ws ("-" numDoub)$d ws {Double(s2d($d))};
double = ws numDoub$d ws {Double(s2d($d))};
negInt = ws ("-" digit+)$i ws {Int(s2i($i))};
int = ws digit+$i ws {Int(s2i($i))};

numDoub = digit+ doubleSep digit+;
doubleSep = ".";
digit = '0'-'9';
ws = (" " | "\t" | "\n" | "\r")*;
letter = 'a'-'z';
