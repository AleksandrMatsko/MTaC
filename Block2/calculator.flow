import MTaC/Block2/grammar;
import ds/tree;

export {
    var_tree : Tree<string, Exp> = makeTree();

    calcExp(exp : Exp) -> double;
}

calcExp(exp : Exp) -> double {
    switch (exp) {
        AddExp(arg1, arg2): calcExp(arg1) + calcExp(arg2);
        MulExp(arg1, arg2): calcExp(arg1) * calcExp(arg2);
        SubExp(arg1, arg2): calcExp(arg1) - calcExp(arg2);
        DivExp(arg1, arg2): calcExp(arg1) / {val : double = calcExp(arg2);
            if (val == 0.0) {
                println("division by zero");
                quit(1);
                0.0;
            }
            else {
                val;
            }
        };
        ModExp(arg1, arg2): calcExp(arg1) % calcExp(arg2);
        Int(i): i2d(i);
        Double(d): d;
    }
}