program = varDefine*:declarations ws body:b { Program(:declarations, :b) };

varDefine = ws "VAR" ws var:v ws ":" ws type:t ws ";" ws { VarDefine(:v, :t) };

type = array | int | bool;
int = ws "INT" ws { INT() };
array = ws "(" ws type:t_ind ws "ARRAY OF" ws type:t_val ws ")" ws { ARRAY(:t_ind, :t_val) };
bool = ws "BOOL" ws { BOOL() };

body = if | while | assign | print | iter | test | sequence | select;
exp = calcExp | num | app | upd | var | negNum;

compOp = "==" | "<=" | ">=" | "<" | ">" | "!=";
binOp = "+" | "-" | "*" | "/" | "%";
logicOp = "&&" | "||";

var = ws (("_")* letter+ (letter | "_")*)$name ws { Var($name) };
num = ws digit+$num ws { Num(s2i($num)) };
negNum = ws "-"digit+$num ws { Num(s2i($num)) };
calcExp = ws "(" ws exp:e1 binOp$op exp:e2  ws")" ws { CalcExp(:e1, $op, :e2) };
app = ws "APP(" exp:arr "," exp:index ")" ws { APP(:arr, :index) };
upd = ws "UPD(" exp:arr "," exp:index "," assignable:val ")" ws { UPD(:arr, :index, :val) };

assign = ws var:v ws ":=" ws assignable:val ws { Assign(:v, :val) };
print = ws "PRINT(" ws assignable:e ws ")" ws { Print(:e) };
iter = ws "(" ws body:b ws ")" ws "*" ws { Iter(:b) };
test = ws "(" boolExp:be ")" ws "?" ws { Test(:be) };
select = ws "(" ws body:b nextSelect*:next ws ")" ws { Select(:b, :next) };
sequence = ws "{" ws body:b nextInSeq*:next ws "}" ws { Sequence(:b, :next) };
if = ws "IF" test:test_cond "THEN" ws body:b1 ws "ELSE" ws body:b2 ws { If(:test_cond, :b1, :b2) };
while = ws "WHILE" test:test_cond "DO" body:b ws { While(:test_cond, :b) };

assignable = boolExp | exp;

boolExp = logicExp | compExp | notBoolExp | true | false | leftVarBoolExp | rightnVarBoolExp;
compExp = ws exp:e1 ws compOp$op ws exp:e2 ws { CompExp(:e1, $op, :e2) };
logicExp = ws "(" ws boolExp:be1 ws logicOp$lop ws boolExp:be2 ws ")" ws { LogicExp(:be1, $lop, :be2) };
notBoolExp = ws "!" boolExp:nbe ws { Not(:nbe) };
true = ws "TRUE" ws { TRUE() };
false = ws "FALSE" ws { FALSE() };
leftVarBoolExp = ws "(" ws var:v ws logicOp$lop ws boolExp:be ws ")" ws {VarBoolExp(:v, $lop, :be)};
rightnVarBoolExp = ws "(" ws boolExp:be ws logicOp$lop ws var:v ws ")" ws {VarBoolExp(:v, $lop, :be)};

nextSelect = ws "U" ws body;
nextInSeq = ws ";" ws body;

letter = 'a'-'z';
bigLetter = 'A'-'Z';
digit = '0'-'9';
ws = (" " | "\t" | "\n" | "\r" | comment)*;

comment = "/*" (letter | bigLetter | space)* "*/";
space = (" " | "\t" | "_");
