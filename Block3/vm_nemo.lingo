vm_program = varDefine*:declarations ws command*:cmds { VMProgram(:declarations, :cmds) };

varDefine = ws "VAR" ws var:v ws ":" ws type:t ws ";" ws { VarDefine(:v, :t) };

type = array | int | bool;
int = ws "INT" ws { INT() };
array = ws "(" ws type:t_ind ws "ARRAY OF" ws type:t_val ws ")" ws { ARRAY(:t_ind, :t_val) };
bool = ws "BOOL" ws { BOOL() };

command = assign | if | print | endCmd;
exp = calcExp | num | app | upd | var | negNum;

compOp = "==" | "<=" | ">=" | "<" | ">" | "!=";
binOp = "+" | "-" | "*" | "/" | "%";
logicOp = "&&" | "||";

var = ws (("_")* letter+ (letter | "_")*)$name ws { Var($name) };
num = ws digit+$num ws { Num(s2i($num)) };
negNum = ws "-"digit+$num ws { Num(s2i($num)) };
calcExp = ws "(" ws exp:e1 binOp$op exp:e2  ws")" ws { CalcExp(:e1, $op, :e2) };
app = ws "app(" exp:arr "," exp:index ")" ws { APP(:arr, :index) };
upd = ws "upd(" exp:arr "," exp:index "," assignable:val ")" ws { UPD(:arr, :index, :val) };

assign = ws digit+$cmd_label ws ":" ws var:v ws ":=" ws assignable:val ws "goto" ws "{" ws gotoLabel*:labels ws "}" ws {AssignCmd(s2i($cmd_label), :v, :val, :labels)}; 
if = ws digit+$cmd_label ws ":" ws "if" test:cond "then" ws "goto" ws "{" ws gotoLabel*:then_labels ws "}" ws "else" ws "goto" ws "{" ws gotoLabel*:else_labels ws "}" ws {IfCmd(s2i($cmd_label), :cond, :then_labels, :else_labels)};
print = ws digit+$cmd_label ws ":" ws "print(" ws assignable:e ws ")" ws "goto" ws "{" ws gotoLabel*:labels ws "}" ws {PrintCmd(s2i($cmd_label), :e, :labels)};
endCmd = ws digit+$cmd_label ws ":" ws {EndCmd(s2i($cmd_label))};

assignable = boolExp | exp;

test = ws "(" boolExp:be ")" ws { Test(:be) };
boolExp = logicExp | compExp | notBoolExp | true | false | leftVarBoolExp | rightnVarBoolExp;
compExp = ws exp:e1 ws compOp$op ws exp:e2 ws {CompExp(:e1, $op, :e2)};
logicExp = ws "(" ws boolExp:be1 ws logicOp$lop ws boolExp:be2 ws ")" ws {LogicExp(:be1, $lop, :be2)};
notBoolExp = ws "!" boolExp:nbe ws {Not(:nbe)};
true = ws "TRUE" ws { TRUE() };
false = ws "FALSE" ws { FALSE() };
leftVarBoolExp = ws "(" ws var:v ws logicOp$lop ws boolExp:be ws ")" ws {VarBoolExp(:v, $lop, :be)};
rightnVarBoolExp = ws "(" ws boolExp:be ws logicOp$lop ws var:v ws ")" ws {VarBoolExp(:v, $lop, :be)};

gotoLabel = okLabel | panicLabel;
okLabel = ws digit+$l ws ","? ws { Label(s2i($l)) };
panicLabel = ws "PANIC" ws ","? ws { Label(s2i("-1")) };

letter = 'a'-'z';
bigLetter = 'A'-'Z';
digit = '0'-'9';
ws = (" " | "\t" | "\n" | "\r" | comment)*;

comment = "/*" (letter | bigLetter | space)* "*/";
space = (" " | "\t" | "_");