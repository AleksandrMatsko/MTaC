import runtime;
import ds/tree;

inds : (array : [int], m : int) -> [Pair<int, int>];

inds(array, m) {
    ref_array : ref [Pair<int, int>] = ref [];
    fori(0, length(array) - 1, \i ->
        fori(0, length(array) - 1, \j ->
            if (array[i] + array[j] == m) {
                refArrayPush(ref_array, Pair(i, j))
            }
        )
    );
    ^ref_array;
}

indsTree : (array : [int], m : int) -> [Pair<int, int>];

indsTree(array, m) {
    res_tree : Tree = foldi(array, makeTree(), \i, tree, arr_i -> 
                            treePushToArrayValue(tree, arr_i, i)
                      );
    foldi(array, [], \i, res, array_i -> 
        switch(lookupTree(res_tree, m - array_i)) {
            Some(val): concat(res, map(val, \x -> Pair(i, x)));
            None(): concat(res, []);
        }
    );

}

main() {
    arr : [int] = [2, 0, 3, 4, 1, 5, 7, -85, -2, 90, 2, 3];
    println(inds(arr, 6));
    println(indsTree(arr, 6));
}
